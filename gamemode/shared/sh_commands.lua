-- allows the player to save their local stats to the sv.db file without having to leave the server
function ForceSave(ply, cmd, args)
	if GetConVar("tm_developermode"):GetInt() == 1 then return end
	if forceDisableProgression == true then return end
	UninitializeNetworkInt(ply, "playerKills")
	UninitializeNetworkInt(ply, "playerDeaths")
	UninitializeNetworkInt(ply, "playerScore")
	UninitializeNetworkInt(ply, "matchesPlayed")
	UninitializeNetworkInt(ply, "matchesWon")
	UninitializeNetworkInt(ply, "highestKillStreak")
	UninitializeNetworkInt(ply, "highestKillGame")
	UninitializeNetworkInt(ply, "farthestKill")
	UninitializeNetworkInt(ply, "playerLevel")
	UninitializeNetworkInt(ply, "playerPrestige")
	UninitializeNetworkInt(ply, "playerXP")
	UninitializeNetworkString(ply, "chosenPlayermodel")
	UninitializeNetworkString(ply, "chosenPlayercard")
	UninitializeNetworkString(ply, "chosenMelee")
	UninitializeNetworkInt(ply, "playerAccoladeOnStreak")
	UninitializeNetworkInt(ply, "playerAccoladeBuzzkill")
	UninitializeNetworkInt(ply, "playerAccoladeLongshot")
	UninitializeNetworkInt(ply, "playerAccoladePointblank")
	UninitializeNetworkInt(ply, "playerAccoladeSmackdown")
	UninitializeNetworkInt(ply, "playerAccoladeHeadshot")
	UninitializeNetworkInt(ply, "playerAccoladeClutch")
	for i = 1, #weaponArray do
		UninitializeNetworkInt(ply, "killsWith_" .. weaponArray[i][1])
	end
end
concommand.Add("tm_forcesave", ForceSave)

-- allows the player to test the look and feel of their customized kill/death/level up UI's
function HUDTestKill(ply, cmd, args)
	net.Start("NotifyKill")
	net.WriteEntity(ply)
	net.WriteString("KRISS Vector")
	net.WriteFloat(math.random(20, 60))
	net.WriteInt(math.random(1, 2), 5)
	net.WriteInt(math.random(1, 10), 10)
	net.Send(ply)
end
concommand.Add("tm_hud_testkill", HUDTestKill)

function HUDTestDeath(ply, cmd, args)
	net.Start("NotifyDeath")
	net.WriteEntity(ply)
	net.WriteString("KRISS Vector")
	net.WriteFloat(math.random(20, 60))
	net.WriteInt(math.random(1, 2), 5)
	net.Send(ply)
end
concommand.Add("tm_hud_testdeath", HUDTestDeath)

function HUDTestLevelUp(ply, cmd, args)
	net.Start("SendNotification")
	net.WriteString("You are now level " .. math.random(1, 60) .. "!")
	net.WriteString("level")
	net.Send(ply)
end
concommand.Add("tm_hud_testlevelup", HUDTestLevelUp)

-- allows the player to wipe their account and start fresh
function PlayerAccountWipe(ply, cmd, args)
	if ply:GetNWBool("mainmenu") == false then return end
	ply:SetNWInt("playerKills", 0)
	ply:SetNWInt("playerDeaths", 0)
	ply:SetNWInt("playerScore", 0)
	ply:SetNWInt("matchesPlayed", 0)
	ply:SetNWInt("matchesWon", 0)
	ply:SetNWInt("highestKillStreak", 0)
	ply:SetNWInt("highestKillGame", 0)
	ply:SetNWInt("farthestKill", 0)
	ply:SetNWInt("playerLevel", 1)
	ply:SetNWInt("playerPrestige", 0)
	ply:SetNWInt("playerXP", 0)
	ply:SetNWInt("playerXPToNextLevel", 750)
	ply:SetNWString("chosenPlayermodel", "models/player/Group03/male_02.mdl")
	ply:SetNWString("chosenPlayercard", "cards/default/construct.png")
	ply:SetNWString("chosenPlayercard", "chosenMelee")
	ply:SetNWInt("playerAccoladeHeadshot", 0)
	ply:SetNWInt("playerAccoladeSmackdown", 0)
	ply:SetNWInt("playerAccoladeLongshot", 0)
	ply:SetNWInt("playerAccoladePointblank", 0)
	ply:SetNWInt("playerAccoladeOnStreak", 0)
	ply:SetNWInt("playerAccoladeBuzzkill", 0)
	ply:SetNWInt("playerAccoladeClutch", 0)

	for i = 1, #weaponArray do
		ply:SetNWInt("killsWith_" .. weaponArray[i][1], 0)
	end
end
concommand.Add("tm_wipeplayeraccount_cannotbeundone", PlayerAccountWipe)

-- allows the player to reset their custom HUD settings to default
function PlayerHUDReset(ply, cmd, args)
	ply:ConCommand("tm_hud_bounds_x 15")
	ply:ConCommand("tm_hud_bounds_y 15")
	ply:ConCommand("tm_hud_text_color_r 255")
	ply:ConCommand("tm_hud_text_color_g 255")
	ply:ConCommand("tm_hud_text_color_b 255")
	ply:ConCommand("tm_hud_font Bender")
	ply:ConCommand("tm_hud_ammo_style 0")
	ply:ConCommand("tm_hud_ammo_bar_color_r 150")
	ply:ConCommand("tm_hud_ammo_bar_color_g 100")
	ply:ConCommand("tm_hud_ammo_bar_color_b 50")
	ply:ConCommand("tm_hud_health_size 450")
	ply:ConCommand("tm_hud_health_offset_x 0")
	ply:ConCommand("tm_hud_health_offset_y 0")
	ply:ConCommand("tm_hud_health_color_high_r 100")
	ply:ConCommand("tm_hud_health_color_high_g 180")
	ply:ConCommand("tm_hud_health_color_high_b 100")
	ply:ConCommand("tm_hud_health_color_mid_r 180")
	ply:ConCommand("tm_hud_health_color_mid_g 180")
	ply:ConCommand("tm_hud_health_color_mid_b 100")
	ply:ConCommand("tm_hud_health_color_low_r 180")
	ply:ConCommand("tm_hud_health_color_low_g 100")
	ply:ConCommand("tm_hud_health_color_low_b 100")
	ply:ConCommand("tm_hud_equipment_offset_x 525")
	ply:ConCommand("tm_hud_equipment_offset_y 0")
	ply:ConCommand("tm_hud_equipment_anchor 0")
	ply:ConCommand("tm_hud_killfeed_style 0")
	ply:ConCommand("tm_hud_killfeed_limit 6")
	ply:ConCommand("tm_hud_killfeed_offset_x 0")
	ply:ConCommand("tm_hud_killfeed_offset_y 40")
	ply:ConCommand("tm_hud_killfeed_opacity 80")
	ply:ConCommand("tm_hud_killdeath_offset_x 0")
	ply:ConCommand("tm_hud_killdeath_offset_y 335")
	ply:ConCommand("tm_hud_kill_iconcolor_r 255")
	ply:ConCommand("tm_hud_kill_iconcolor_g 255")
	ply:ConCommand("tm_hud_kill_iconcolor_b 255")
	ply:ConCommand("tm_hud_keypressoverlay_x 0")
	ply:ConCommand("tm_hud_keypressoverlay_y 0")
	ply:ConCommand("tm_hud_keypressoverlay_inactive_r 255")
	ply:ConCommand("tm_hud_keypressoverlay_inactive_g 255")
	ply:ConCommand("tm_hud_keypressoverlay_inactive_b 255")
	ply:ConCommand("tm_hud_keypressoverlay_actuated_r 255")
	ply:ConCommand("tm_hud_keypressoverlay_actuated_g 0")
	ply:ConCommand("tm_hud_keypressoverlay_actuated_b 0")
	ply:ConCommand("tm_hud_velocitycounter_x 0")
	ply:ConCommand("tm_hud_velocitycounter_y 190")
	ply:ConCommand("tm_hud_velocitycounter_r 255")
	ply:ConCommand("tm_hud_velocitycounter_g 255")
	ply:ConCommand("tm_hud_velocitycounter_b 255")
	ply:ConCommand("tm_hud_obj_scale 1")
	ply:ConCommand("tm_hud_obj_color_empty_r 255")
	ply:ConCommand("tm_hud_obj_color_empty_g 255")
	ply:ConCommand("tm_hud_obj_color_empty_b 255")
	ply:ConCommand("tm_hud_obj_color_occupied_r 255")
	ply:ConCommand("tm_hud_obj_color_occupied_g 255")
	ply:ConCommand("tm_hud_obj_color_occupied_b 0")
	ply:ConCommand("tm_hud_obj_color_contested_r 255")
	ply:ConCommand("tm_hud_obj_color_contested_g 0")
	ply:ConCommand("tm_hud_obj_color_contested_b 0")
	ply:ConCommand("tm_hud_dmgindicator_color_r 255")
	ply:ConCommand("tm_hud_dmgindicator_color_g 0")
	ply:ConCommand("tm_hud_dmgindicator_color_b 0")
	ply:ConCommand("tm_hud_dmgindicator_opacity 85")
	net.Start("SendNotification")
	net.WriteString("Successfully reset HUD to default settings!")
	net.WriteString("success")
	net.Send(ply)
end
concommand.Add("tm_resethudtodefault_cannotbeundone", PlayerHUDReset)

function ImportHUDCode(ply, cmd, args)
	local code = args[1]
	local var = {}
	if code == nil then return end
	for s in string.gmatch(code, "[^-]+") do
		table.insert(var, s)
	end
	if table.Count(var) != 61 then
		net.Start("SendNotification")
		net.WriteString("Failed HUD import (" .. table.Count(var) .. " vars), code may be from older TM version.")
		net.WriteString("warning")
		net.Send(ply)
		return
	end
	ply:ConCommand("tm_hud_scale " .. var[1])
	ply:ConCommand("tm_hud_font " .. var[2])
	ply:ConCommand("tm_hud_bounds_x " .. var[3])
	ply:ConCommand("tm_hud_bounds_y " .. var[4])
	ply:ConCommand("tm_hud_text_color_r " .. var[5])
	ply:ConCommand("tm_hud_text_color_g " .. var[6])
	ply:ConCommand("tm_hud_text_color_b " .. var[7])
	ply:ConCommand("tm_hud_ammo_style " .. var[8])
	ply:ConCommand("tm_hud_ammo_bar_color_r " .. var[9])
	ply:ConCommand("tm_hud_ammo_bar_color_g " .. var[10])
	ply:ConCommand("tm_hud_ammo_bar_color_b " .. var[11])
	ply:ConCommand("tm_hud_health_size " .. var[12])
	ply:ConCommand("tm_hud_health_offset_x " .. var[13])
	ply:ConCommand("tm_hud_health_offset_y " .. var[14])
	ply:ConCommand("tm_hud_health_color_high_r " .. var[15])
	ply:ConCommand("tm_hud_health_color_high_g " .. var[16])
	ply:ConCommand("tm_hud_health_color_high_b " .. var[17])
	ply:ConCommand("tm_hud_health_color_mid_r " .. var[18])
	ply:ConCommand("tm_hud_health_color_mid_g " .. var[19])
	ply:ConCommand("tm_hud_health_color_mid_b " .. var[20])
	ply:ConCommand("tm_hud_health_color_low_r " .. var[21])
	ply:ConCommand("tm_hud_health_color_low_g " .. var[22])
	ply:ConCommand("tm_hud_health_color_low_b " .. var[23])
	ply:ConCommand("tm_hud_equipment_anchor " .. var[24])
	ply:ConCommand("tm_hud_equipment_offset_x " .. var[25])
	ply:ConCommand("tm_hud_equipment_offset_y " .. var[26])
	ply:ConCommand("tm_hud_enablekillfeed " .. var[27])
	ply:ConCommand("tm_hud_killfeed_style " .. var[28])
	ply:ConCommand("tm_hud_killfeed_limit " .. var[29])
	ply:ConCommand("tm_hud_killfeed_offset_x " .. var[30])
	ply:ConCommand("tm_hud_killfeed_offset_y " .. var[31])
	ply:ConCommand("tm_hud_killfeed_opacity " .. var[32])
	ply:ConCommand("tm_hud_killdeath_offset_x " .. var[33])
	ply:ConCommand("tm_hud_killdeath_offset_y " .. var[34])
	ply:ConCommand("tm_hud_kill_iconcolor_r " .. var[35])
	ply:ConCommand("tm_hud_kill_iconcolor_g " .. var[36])
	ply:ConCommand("tm_hud_kill_iconcolor_b " .. var[37])
	ply:ConCommand("tm_hud_obj_scale " .. var[38])
	ply:ConCommand("tm_hud_obj_color_empty_r " .. var[39])
	ply:ConCommand("tm_hud_obj_color_empty_g " .. var[40])
	ply:ConCommand("tm_hud_obj_color_empty_b " .. var[41])
	ply:ConCommand("tm_hud_obj_color_occupied_r " .. var[42])
	ply:ConCommand("tm_hud_obj_color_occupied_g " .. var[43])
	ply:ConCommand("tm_hud_obj_color_occupied_b " .. var[44])
	ply:ConCommand("tm_hud_obj_color_contested_r " .. var[45])
	ply:ConCommand("tm_hud_obj_color_contested_g " .. var[46])
	ply:ConCommand("tm_hud_obj_color_contested_b " .. var[47])
	ply:ConCommand("tm_hud_dmgindicator_color_r " .. var[48])
	ply:ConCommand("tm_hud_dmgindicator_color_g " .. var[49])
	ply:ConCommand("tm_hud_dmgindicator_color_b " .. var[50])
	ply:ConCommand("tm_hud_dmgindicator_opacity " .. var[51])
	ply:ConCommand("tm_hud_keypressoverlay_x " .. var[52])
	ply:ConCommand("tm_hud_keypressoverlay_y " .. var[53])
	ply:ConCommand("tm_hud_keypressoverlay_inactive_r " .. var[54])
	ply:ConCommand("tm_hud_keypressoverlay_inactive_g " .. var[55])
	ply:ConCommand("tm_hud_keypressoverlay_inactive_b " .. var[56])
	ply:ConCommand("tm_hud_keypressoverlay_actuated_r " .. var[57])
	ply:ConCommand("tm_hud_keypressoverlay_actuated_g " .. var[58])
	ply:ConCommand("tm_hud_keypressoverlay_actuated_b " .. var[59])
	ply:ConCommand("tm_hud_velocitycounter_x " .. var[60])
	ply:ConCommand("tm_hud_velocitycounter_y " .. var[61])
	net.Start("SendNotification")
	net.WriteString("Successfully imported HUD!")
	net.WriteString("success")
	net.Send(ply)
end
concommand.Add("tm_importhudcode_cannotbeundone", ImportHUDCode)